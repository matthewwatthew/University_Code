/*Matthew Jordan
 * (mrj3dd)
 * Assignment 5- GPA Calculator 
 */

	import java.awt.Color;
	import java.awt.GridLayout;
	import java.awt.Panel;
	import java.awt.event.ActionEvent;
	import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JButton;
	import javax.swing.JFrame;
	import javax.swing.JLabel;
	import javax.swing.JTextField;
	public class GPACalc{
		private int counter;
		private ArrayList<String> ClassGPA = new ArrayList<String>(); //Assumption: Previous,Current,Future are not displayed separately. 
		private ArrayList<String> Grades = new ArrayList<String>();
		private ArrayList<String> Credits = new ArrayList<String>();
		private JButton CalculateGPA;
		private JButton RemoveAll;
		private JButton RemoveOne;
		private JButton TargetGPA;
		private JButton fifteenNew;
		private JButton AddClass;
		private JTextField TargetGPAField;
		private JTextField courseEntry;
		private JTextField creditHoursField;
		private JTextField RemoveOneFiled;
		private Panel centerpanel;
		private Panel insidePanel;
		private Panel comboBoxPanel;
		private Panel lowerpanel;
		private Panel lowerpanel2;
		private JLabel instructions1;
		private JLabel instructions2;
		private JLabel instructions5;
		private JTextField gradeDistributionBox;
		private JTextField finalResult;
		
		public GPACalc() {	//Assumption: Using JLabel/Java is appropriate to use for the project.
			JFrame frame = new JFrame("Matt's Calculator");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.setSize(1000, 800);
			frame.setLayout(new GridLayout(6,1));
			centerpanel = new Panel();
			centerpanel.setLayout(new GridLayout(1,2));
			lowerpanel = new Panel();
			lowerpanel.setBackground(Color.pink);
			lowerpanel2 = new Panel();
			lowerpanel2.setBackground(Color.magenta);
			insidePanel = new Panel();
			comboBoxPanel = new Panel();
			instructions5 = new JLabel("<html>Classes Entered: " + ClassGPA + "</html>");
			instructions5.setFont(instructions5.getFont().deriveFont(15.0f));
			counter = 1;
			ClassGPA = new ArrayList<String>();
			
			instructions1 = new JLabel("   GPA Calculator: This Calculator utilizes the A+, A , A- based scale For GPA");
			instructions1.setFont(instructions1.getFont().deriveFont(26.0f));
			instructions2 = new JLabel("                        Enter Below- 1) Course Name [Optional]: 2) Grade Received [Optional] 3) Number of Credit Hours: ");
			instructions2.setFont(instructions1.getFont().deriveFont(17.0f)); //Assumption: Any order or Course, Grade, and Credits is suitable. 
			courseEntry = new JTextField(20);
			gradeDistributionBox = new JTextField(10);
			creditHoursField = new JTextField(10);
			RemoveOneFiled = new JTextField(3);
			
			// BUTTONS 
			fifteenNew = new JButton("Add 15 Blank Credit Hours");
			fifteenNew.addActionListener(new FifteenNewListener());
			AddClass = new JButton("Add Class");
			AddClass.addActionListener(new AddClassListener());
			
			CalculateGPA = new JButton("Calculate GPA!");
			CalculateGPA.addActionListener(new GPAListener());
			
			RemoveAll = new JButton("Remove All");
			RemoveAll.addActionListener(new removeAllListener());
			
			TargetGPA = new JButton("Enter Target GPA Here:");
			TargetGPAField = new JTextField(20);
			TargetGPA.addActionListener(new TargetListener());
			
			RemoveOne = new JButton("Remove One Class: Choose Location (1 for First, etc)");
			RemoveOne.addActionListener(new removeOneListener());
			finalResult = new JTextField(10);
			finalResult.setEditable(false);
			
			frame.add(instructions1);
			frame.add(instructions2);
		
			lowerpanel2.add(fifteenNew);
			lowerpanel.add(CalculateGPA);
			lowerpanel.add(finalResult);
			lowerpanel.add(TargetGPA);
			lowerpanel.add(TargetGPAField);
			lowerpanel2.add(RemoveOne);
			lowerpanel2.add(RemoveOneFiled);
			lowerpanel2.add(RemoveAll);
		
			comboBoxPanel.add(gradeDistributionBox);
			
			insidePanel.add(courseEntry);
			insidePanel.add(comboBoxPanel);
			insidePanel.add(creditHoursField);
			insidePanel.add(AddClass);
			
			frame.add(insidePanel);
			frame.add(instructions5);
			frame.add(lowerpanel);
			frame.add(lowerpanel2);
			

			frame.setLocationRelativeTo(null);
			frame.setVisible(true);
		}
		
		//inner class
			private class FifteenNewListener implements ActionListener{ //Assumption: The 15 credit hours is equivalent to 5 classes worth of 3 credit hours.
				@Override
				public void actionPerformed(ActionEvent e) {
					ClassGPA.add("(Course: BLANK COURSE,  Grade:  BLANK, Number of Credits: 3)");
					Grades.add("");
					Credits.add("3");
					counter = counter +1;
					ClassGPA.add("(Course: BLANK COURSE,  Grade:  BLANK, Number of Credits: 3)");
					Grades.add("");
					Credits.add("3");
					counter = counter +1;
					ClassGPA.add("(Course: BLANK COURSE,  Grade:  BLANK, Number of Credits: 3)");
					Grades.add("");
					Credits.add("3");
					counter = counter +1;
					ClassGPA.add("(Course: BLANK COURSE,  Grade:  BLANK, Number of Credits: 3)");
					Grades.add("");
					Credits.add("3");
					counter = counter +1;
					ClassGPA.add("(Course: BLANK COURSE,  Grade:  BLANK, Number of Credits: 3)");
					Grades.add("");
					Credits.add("3");
					counter = counter +1;
					finalResult.setText("");
					instructions5.setText("<html>Courses Entered: " + ClassGPA + "</html>");
					
		
			}
			}
			// inner class
			private class removeAllListener implements ActionListener{ //Assumption: Remove All removes everything from the list.
				@Override
				public void actionPerformed(ActionEvent e) {
					ClassGPA = new ArrayList<String>();
					Grades = new ArrayList<String>();
					Credits = new ArrayList<String>();
					instructions5.setText("<html>Courses Entered: " + ClassGPA + "</html>");
					counter = 1;
					finalResult.setText("");
				}
				
			}
			private class removeOneListener implements ActionListener{ //Assumption: Remove a specific course, not just the last one added. 

				@Override
				public void actionPerformed(ActionEvent arg0) {
					String remove = RemoveOneFiled.getText();
					int index = Integer.parseInt(remove);
					index = index - 1;
					ClassGPA.remove(index);
					Grades.remove(index);
					Credits.remove(index);
					counter = counter -1;
					instructions5.setText("<html>Coursed Entered: " + ClassGPA + "</html>");
				}
				
			}
			private class AddClassListener implements ActionListener{//Assumption: Adds a new class, just like the ones previous.

				@Override
				public void actionPerformed(ActionEvent arg0) {
					String course = courseEntry.getText();
					String grade = gradeDistributionBox.getText();
					Grades.add(grade);
					String credits = creditHoursField.getText();
					Credits.add(credits);
					String addList = "(Course: "+ course + ", Grade: " + grade + ", Number of Credits: "+ credits + ".)";
					counter = counter + 1;
					ClassGPA.add(addList);
					finalResult.setText("");
					instructions5.setText("<html>Coursed Entered: " + ClassGPA + "</html>");
					
					}
				}
			private class TargetListener implements ActionListener{

				@Override
				public void actionPerformed(ActionEvent e) {
					int number = 0;
					int y = 0;
					int importantNumber = 0;
					while (y != Grades.size()) {
						if (Grades.get(y).equals("")) {
							importantNumber = importantNumber + Integer.parseInt(Credits.get(y));
						}
						y = y+1;
					}
					for(String element: Credits) {
						number = number + Integer.parseInt(element);
					}
					String stringTargetGPA = TargetGPAField.getText();
					double targetGPA = Double.parseDouble(stringTargetGPA);
					targetGPA = targetGPA * number;
					int x = 0;
					while(x != Grades.size()){
						double creditHours = 0;
						if (Grades.get(x).equals("") == false) {
							creditHours = Double.parseDouble(Credits.get(x));
							targetGPA = targetGPA - GPAConversion(Grades.get(x), creditHours);
						}
						x = x+1;
					}
					targetGPA = targetGPA/importantNumber;
					if(targetGPA > 4.0) {
						TargetGPAField.setText("Add More Credits: ENTER ANOTHER GPA");
					}
					else if(targetGPA < 2.0) {
						TargetGPAField.setText("You can take less credits: ENTER ANOTHER GPA");
					}
					else {
						TargetGPAField.setText(targetGPA +"");
						for(String element: ClassGPA) {
							if(element.contains("Grade:  " )) {
								int index1 = element.indexOf("Grade:  ");
								int index2 = element.indexOf(", N");
								String finalString = element.substring(0,index1 + 6) + targetGPA + element.substring(index2);
								int finalIndex = ClassGPA.indexOf(element);
								ClassGPA.set(finalIndex, finalString);
							}
						}
						for(String element: ClassGPA) {
							if(element.contains("Grade: ," )) {
								int index1 = element.indexOf("Grade: ,");
								int index2 = element.indexOf(", N");
								String finalString = element.substring(0,index1 + 6) + targetGPA + element.substring(index2);
								int finalIndex = ClassGPA.indexOf(element);
								ClassGPA.set(finalIndex, finalString);
								}
							instructions5.setText("<html>Classes Entered: " + ClassGPA + "</html>");
						}
					}
				}
			}	
			
			
			private class GPAListener implements ActionListener{ //Assumption: GPA is based on the A+,A,A- scale.

				@Override
				public void actionPerformed(ActionEvent arg0) {
					int x = 0;
					double calculation = 0;
					double finCreditHours = 0;
					while(x != Grades.size()){
						double creditHours = 0;
						if (Grades.get(x).equals("") == false) {
							creditHours = Double.parseDouble(Credits.get(x));
							calculation = calculation + GPAConversion(Grades.get(x), creditHours);
							finCreditHours = finCreditHours + creditHours;
						}
						x = x+1;
					}
					
					calculation = calculation / finCreditHours;
					double finality = Math.pow(10, 3);
					calculation = Math.round(calculation * finality) / finality ;
					finalResult.setText(calculation + " ");

				}
			}
			
			public double GPAConversion(String word, double creditHours) { //Assumption: Either A, or a would be accepted. 
				double enteredValue = 0;
				if(word.equals("A+") || word.equals("a+")){
					enteredValue = creditHours * 4.0;
				}
				else if (word.equals("A") || word.equals("a")){
					enteredValue = creditHours * 4.0;
				}
				else if (word.equals("A-") || word.equals("a-")) {
					enteredValue = creditHours * 3.7;
				}
				else if (word.equals("B+") || word.equals("b+")){
					enteredValue = creditHours * 3.3;
				}
				else if (word.equals("B") || word.equals("b")) {
					enteredValue = creditHours * 3;
				}
				else if (word.equals("B-") || word.equals("b-")) {
					enteredValue = creditHours * 2.7;
				}
				else if (word.equals("C+") || word.equals("c+")) {
					enteredValue = creditHours * 2.3;
				}
				else if (word.equals("C") || word.equals("c")) {
					enteredValue = creditHours * 2.0;
				}
				else if (word.equals("C-") || word.equals("c-")){
					enteredValue = creditHours * 1.7;
				}
				else if(word.equals("D+") || word.equals("d+")) {
					enteredValue = creditHours * 1.3;
				}
				else if(word.equals("D") || word.equals("d")) {
					enteredValue = creditHours * 1;
				}
				else if(word.equals("D-") || word.equals("d-")) {
					enteredValue = creditHours * 0.7;
				}
				else if(word.equals("F") || word.equals("f")) {
					enteredValue = creditHours * 0;
				}
				return enteredValue;
			}	
			
			public static void main(String[] args) {
				new GPACalc();
			}
	}	